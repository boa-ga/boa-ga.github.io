{"version":3,"sources":["webpack:///src/app/shared/chat/chat.component.ts","webpack:///src/app/shared/chat/chat.component.html","webpack:///src/app/shared/chat/chat.module.ts","webpack:///src/app/shared/chat/chat.service.ts"],"names":["ChatComponent","chatService","tearDown$","isScrollToLastRequired","messages$","pipe","subscribe","messages","scrollToBottom","index","item","timestamp","sendMessageFromMe","currentMessage","next","complete","nativeEl","messagesList","nativeElement","scrollTop","scrollHeight","onSubmit","selector","templateUrl","styleUrls","read","ChatModule","imports","declarations","providers","exports","ChatService","myName","messagesSubject","myMessagesSubject","text","sendMessage","from","push","Date","toISOString","isSystem","asObservable"],"mappings":"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","file":"default~game-munchkin-game-munchkin-module~game-test-game-test-module-es5.js","sourcesContent":["import { AfterViewChecked, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ChatMessage } from './chat.message';\nimport { ChatService } from './chat.service';\n\n@Component({\n  selector: 'bg-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss'],\n})\nexport class ChatComponent implements AfterViewChecked, OnInit, OnDestroy {\n  currentMessage: string;\n  messages: Array<ChatMessage>;\n\n  @ViewChild('messagesList', { read: ElementRef })\n  messagesList: any;\n\n  private tearDown$ = new Subject();\n  private isScrollToLastRequired = false;\n\n  constructor(private chatService: ChatService) {}\n\n  ngOnInit() {\n    this.chatService.messages$\n      .pipe(takeUntil(this.tearDown$))\n      .subscribe((messages) => {\n        this.messages = messages;\n        this.isScrollToLastRequired = true;\n      });\n  }\n\n  ngAfterViewChecked() {\n    if (this.isScrollToLastRequired) {\n      this.scrollToBottom();\n      this.isScrollToLastRequired = false;\n    }\n  }\n\n  trackByFn(index: number, item: ChatMessage) {\n    return item.timestamp;\n  }\n\n  onSubmit() {\n    this.chatService.sendMessageFromMe(this.currentMessage);\n    this.currentMessage = '';\n  }\n\n  ngOnDestroy() {\n    this.tearDown$.next();\n    this.tearDown$.complete();\n  }\n\n  private scrollToBottom(): void {\n    const nativeEl = this.messagesList.nativeElement;\n\n    nativeEl.scrollTop = nativeEl.scrollHeight;\n  }\n}\n","<div fxFlex fxLayout=\"column\">\n  <mat-list fxFlex #messagesList class=\"chat__messages-container\">\n    <mat-list-item *ngFor=\"let message of messages; trackBy: trackByFn\">\n      <mat-icon\n        mat-list-avatar\n        class=\"chat__message-icon\"\n        [svgIcon]=\"message.isSystem ? 'icon-info' : 'icon-user'\"\n      ></mat-icon>\n      <div mat-line>\n        <p class=\"chat__message-title\">{{ message.from }}</p>\n        <p class=\"chat__message-text\">{{ message.text }}</p>\n      </div>\n    </mat-list-item>\n  </mat-list>\n  <form fxFlex=\"0 0 auto\" class=\"chat__form\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field fxFlex>\n      <input\n        matInput\n        placeholder=\"{{ 'Message' | translate }}\"\n        name=\"message\"\n        autocomplete=\"off\"\n        [(ngModel)]=\"currentMessage\"\n      />\n    </mat-form-field>\n    <button mat-button type=\"submit\" [disabled]=\"!currentMessage\">\n      {{ 'Send' | translate }}\n    </button>\n  </form>\n</div>\n","import { NgModule } from '@angular/core';\n\nimport { SharedUIModule } from '../shared-ui.module';\nimport { ChatComponent } from './chat.component';\nimport { ChatService } from './chat.service';\n\n@NgModule({\n  imports: [SharedUIModule],\n  declarations: [ChatComponent],\n  providers: [ChatService],\n  exports: [ChatComponent],\n})\nexport class ChatModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nimport { ChatMessage } from './chat.message';\n\n@Injectable()\nexport class ChatService {\n  get messages$() {\n    return this.messagesSubject.asObservable();\n  }\n\n  get myMessages$() {\n    return this.myMessagesSubject.asObservable();\n  }\n\n  myName = 'Me';\n\n  private messages: ChatMessage[] = [];\n  private messagesSubject = new BehaviorSubject(this.messages);\n  private myMessagesSubject = new Subject<string>();\n\n  constructor() {}\n\n  sendMessageFromMe(text: string) {\n    this.sendMessage(this.myName, text);\n    this.myMessagesSubject.next(text);\n  }\n\n  sendMessage(from: string, text: string) {\n    this.messages.push({\n      from,\n      text,\n      timestamp: new Date().toISOString(),\n    });\n    this.messagesSubject.next(this.messages);\n  }\n\n  sendSystemMessage(text: string) {\n    this.messages.push({\n      text,\n      isSystem: true,\n      timestamp: new Date().toISOString(),\n    } as ChatMessage);\n    this.messagesSubject.next(this.messages);\n  }\n}\n"]}