{"version":3,"sources":["./src/app/shared/chat/chat.component.ts","./src/app/shared/chat/chat.component.html","./src/app/shared/chat/chat.module.ts","./src/app/shared/chat/chat.service.ts"],"names":[],"mappings":"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","file":"default~game-munchkin-game-munchkin-module~game-test-game-test-module-es2015.js","sourcesContent":["import { AfterViewChecked, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ChatMessage } from './chat.message';\nimport { ChatService } from './chat.service';\n\n@Component({\n  selector: 'bg-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss'],\n})\nexport class ChatComponent implements AfterViewChecked, OnInit, OnDestroy {\n  currentMessage: string;\n  messages: Array<ChatMessage>;\n\n  @ViewChild('messagesList', { read: ElementRef })\n  messagesList: any;\n\n  private tearDown$ = new Subject();\n  private isScrollToLastRequired = false;\n\n  constructor(private chatService: ChatService) {}\n\n  ngOnInit() {\n    this.chatService.messages$\n      .pipe(takeUntil(this.tearDown$))\n      .subscribe((messages) => {\n        this.messages = messages;\n        this.isScrollToLastRequired = true;\n      });\n  }\n\n  ngAfterViewChecked() {\n    if (this.isScrollToLastRequired) {\n      this.scrollToBottom();\n      this.isScrollToLastRequired = false;\n    }\n  }\n\n  trackByFn(index: number, item: ChatMessage) {\n    return item.timestamp;\n  }\n\n  onSubmit() {\n    this.chatService.sendMessageFromMe(this.currentMessage);\n    this.currentMessage = '';\n  }\n\n  ngOnDestroy() {\n    this.tearDown$.next();\n    this.tearDown$.complete();\n  }\n\n  private scrollToBottom(): void {\n    const nativeEl = this.messagesList.nativeElement;\n\n    nativeEl.scrollTop = nativeEl.scrollHeight;\n  }\n}\n","<div fxFlex fxLayout=\"column\">\n  <mat-list fxFlex #messagesList class=\"chat__messages-container\">\n    <mat-list-item *ngFor=\"let message of messages; trackBy: trackByFn\">\n      <mat-icon\n        mat-list-avatar\n        class=\"chat__message-icon\"\n        [svgIcon]=\"message.isSystem ? 'icon-info' : 'icon-user'\"\n      ></mat-icon>\n      <div mat-line>\n        <p class=\"chat__message-title\">{{ message.from }}</p>\n        <p class=\"chat__message-text\">{{ message.text }}</p>\n      </div>\n    </mat-list-item>\n  </mat-list>\n  <form fxFlex=\"0 0 auto\" class=\"chat__form\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field fxFlex>\n      <input\n        matInput\n        placeholder=\"{{ 'Message' | translate }}\"\n        name=\"message\"\n        autocomplete=\"off\"\n        [(ngModel)]=\"currentMessage\"\n      />\n    </mat-form-field>\n    <button mat-button type=\"submit\" [disabled]=\"!currentMessage\">\n      {{ 'Send' | translate }}\n    </button>\n  </form>\n</div>\n","import { NgModule } from '@angular/core';\n\nimport { SharedUIModule } from '../shared-ui.module';\nimport { ChatComponent } from './chat.component';\nimport { ChatService } from './chat.service';\n\n@NgModule({\n  imports: [SharedUIModule],\n  declarations: [ChatComponent],\n  providers: [ChatService],\n  exports: [ChatComponent],\n})\nexport class ChatModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nimport { ChatMessage } from './chat.message';\n\n@Injectable()\nexport class ChatService {\n  get messages$() {\n    return this.messagesSubject.asObservable();\n  }\n\n  get myMessages$() {\n    return this.myMessagesSubject.asObservable();\n  }\n\n  myName = 'Me';\n\n  private messages: ChatMessage[] = [];\n  private messagesSubject = new BehaviorSubject(this.messages);\n  private myMessagesSubject = new Subject<string>();\n\n  constructor() {}\n\n  sendMessageFromMe(text: string) {\n    this.sendMessage(this.myName, text);\n    this.myMessagesSubject.next(text);\n  }\n\n  sendMessage(from: string, text: string) {\n    this.messages.push({\n      from,\n      text,\n      timestamp: new Date().toISOString(),\n    });\n    this.messagesSubject.next(this.messages);\n  }\n\n  sendSystemMessage(text: string) {\n    this.messages.push({\n      text,\n      isSystem: true,\n      timestamp: new Date().toISOString(),\n    } as ChatMessage);\n    this.messagesSubject.next(this.messages);\n  }\n}\n"],"sourceRoot":"webpack:///"}